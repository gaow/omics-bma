#!/usr/bin/env sos-runner
#vim: set filetype=python: set expandtab : ts=4:
#fileformat=SOS1.0
from OmicsBMA.core import test_almost_equal_recursive
import numpy as np

[parameters]
em_res = "EM.res"
ip_res = "IP.res"
sim_out = ["data.txt", "prior.txt", "init.txt"]
niter = 10
default_level = 5

[simulate: alias = "simulate"]
output: "data.txt", "prior.txt", "init.txt"
R:
# set.seed(100)
options(digits = 13)
sampsize <- 10000
sd <- c(1, 1.1, 1.2)
z <- rnorm(sampsize, 0, sample(sd, sampsize, replace = TRUE))
lik <- t(vapply(z, dnorm, sd, sd = sd))
prior <- c(1, 1, 1)
pi.init <- c(0.3, 0.2, 0.5)
write.table(lik, ${output[0]!r}, row.names = F, col.names = F)
write(prior, ${output[1]!r})
write(pi.init, ${output[2]!r})

[fit_EM: alias = "EM"]
check_R_library('stephens999/ashr', '1.1.14+')
input: simulate.output
output: em_res
R:
require(ashr)
lik <- read.table(${input[0]!r})
prior <- scan(${input[1]!r})
pi.init <- scan(${input[2]!r})
res1 <- mixEM(lik, prior, pi.init)
lapply(res1, write, ${output!r}, append = T, ncolumns = 1000)
# require(REBayes)
# res2 <- mixIP(lik, prior, pi.init)
# lapply(res2, write, "COP.res", append = T, ncolumns = 1000)

[fit_IP: alias = "IP"]
input: simulate.output
output: ip_res
python:
from OmicsBMA.mix_opt import mixIP
import numpy as np
data = np.loadtxt(${input[0]!r})
prior = np.loadtxt(${input[1]!r})
res = mixIP(data, prior, control = {'iparam.log': 0})
output = '\t'.join(list(map(str, res[0]))) + '\n'
output += str(res[1]) + '\n'
res = mixIP(data / np.max(data), prior, control = {'iparam.log': 0})
output += '\t'.join(list(map(str, res[0]))) + '\n'
output += str(res[1])
with open(${output!r}, 'w') as f:
     f.write(output)

[clean]
input: ip_res, em_res, sim_out, dynamic = True
run:
  rm -f ${input} 

[compare]
level = default_level
failures = 0
for i in range(niter):
  # run simulation & computation
  sos_run('simulate+fit_EM+fit_IP')
  # Load results
  try:
    with open(em_res) as f:
         txt = f.readlines()
    em = np.array([float(x) for x in txt[0].strip().split()])
    em_status = txt[-1].strip().upper()
    with open(ip_res) as f:
         txt = f.readlines()
    cop = np.array([float(x) for x in txt[0].strip().split()])
    cop_status = txt[-1].strip().upper()
    if em_status != "TRUE":
         print("EM did not converge")
         failures += 1
         continue
    if cop_status != "TRUE":
         print("IP-COP did not converge")
         failures += 1
         continue
    level = test_almost_equal_recursive(em, cop, level)
    print("Test %s passed at level %s!" % (i + 1, level))
  except Exception as e:
    failures += 1
  sos_run('clean')
  if failures > 0:
     print('failures: {}'.format(failures))

[default]
sos_run('simulate+fit_EM+fit_IP')